#!/bin/bash

# configure the projects, and build in a specific directory
#
# Return codes:
#   0: no error occurred
#   1: Generic error
#   3: Arguments error
#   4: Unsupported getopt version
#   5: Implementation error
#
# TODO:
#   Path to the configure is hard-coded

VERSION=1.0.1

OPTIONS=vh
LONG_OPTIONS=help,version,no-build


BUILD_DIR=./build # build destination


function main()
{
  autoreconf --force --install --warnings=all || exit $?

  rm -rf "$BUILD_DIR"
  mkdir -p "$BUILD_DIR"

  pushd "$BUILD_DIR"
  ../configure || exit $? # TODO find the configure wherever the build folder is

  if [[ -z $NO_BUILD ]]; then
    make -j$(grep -c processor /proc/cpuinfo) || exit $?
  fi
  popd # "$BUILD_DIR"
}



# Display the script usage
function usage()
{
  echo ""
  echo "Usage:"
  echo "  $0 [--no-build]"
  echo ""
  echo "Options:"
  echo "  --no-build: configure the project only, do not run make"
  echo ""
  echo "War Evolved build script. Version $VERSION"
  echo ""
}


function printError()
{
  local -r color_error='\e[0;31m'
  local -r color_normal=$(echo -e '\e[0m')

  echo -e "${color_error}$1${color_normal}" 1>&2
}


# Checks the command line arguments
# $@: command line arguments
function check_args()
{
  getopt --test
  if [[ $? -ne 4 ]]; then
    printError "Unsupported getopt version"
    exit 4
  fi

  # must be global in order to handle abortion on 'unrecognized option'
  PARSED=$(getopt --options=$OPTIONS --longoptions=$LONG_OPTIONS --name "$(basename "$0")" -- "$@")
  if [[ $? -ne 0 ]]; then
    usage
    printError "Invalid arguments"
    exit 3
  fi

  eval set -- "$PARSED"
  while true; do
    case "$1" in
      -h | --help)
        usage
        exit 0
        ;;

      -v | --version)
        echo "$VERSION"
        exit 0
        ;;

      --no-build)
        NO_BUILD=1
        ;;

      --)
        shift
        break
        ;;

      *)
        printError "[IMPLEMENTATION ERROR] Supported but not handled argument $1"
        exit 5
        ;;
    esac
  done
}


# ___________________________________ main ___________________________________ #
check_args "$@"
main
