#!/bin/bash

# configure the projects, and build in a specific directory
#
# Return codes:
#   0: no error occurred
#   1: Generic error
#   3: Arguments error
#   4: Unsupported getopt version
#   5: Implementation error


VERSION=1.1.0

OPTIONS=vh
LONG_OPTIONS=help,version,build-dir:,no-build,release

BUILD_DIR=./build # build destination



function main()
{
  autoreconf --force --install --warnings=all || exit $?

  rm -rf "$BUILD_DIR"
  mkdir -p "$BUILD_DIR"

  local root_dir=$(dirname $(realpath $0))
  pushd "$BUILD_DIR"
  "${root_dir}/configure" $CONFIGURE_FLAGS || exit $?

  if [[ -z $NO_BUILD ]]; then
    make -j$(grep -c processor /proc/cpuinfo) || exit $?
  fi
  popd # "$BUILD_DIR"
}



# Display the script usage
function usage()
{
  echo ""
  echo "Usage:"
  echo "  $0 [--release] [--no-build] [--build-dir=dir]"
  echo ""
  echo "Options:"
  echo "  -h | --help: Show this usage"
  echo "  -v | --version: Show $0 version ($VERSION)"
  echo "  --release: configure (eventually build) the project in release mode"
  echo "  --no-build: configure the project only, do not run make"
  echo "  --build-dir=path: path where to build the project (will be cleared!)"
  echo ""
  echo "Notes:"
  echo "  The compilation flags can be customized using CXX and WE_EXTRA_CXXFLAGS variables:"
  echo "    CXX=clang++ WE_EXTRA_CXXFLAGS='-Wno-unknown-warning-option -Wdocumentation' $0"
  echo "  The configure flags can be customized using CONFIGURE_FLAGS variables:"
  echo "    CONFIGURE_FLAGS='--host=aarch64-linux-gnu' CXX='aarch64-linux-gnu-g++ --sysroot=/root/fs/' $0"
  echo ""
  echo "War Evolved build script. Version $VERSION"
  echo ""
}


function printError()
{
  local -r color_error='\e[0;31m'
  local -r color_normal=$(echo -e '\e[0m')

  echo -e "${color_error}$1${color_normal}" 1>&2
}


# Checks the command line arguments
# $@: command line arguments
function check_args()
{
  getopt --test
  if [[ $? -ne 4 ]]; then
    printError "Unsupported getopt version"
    exit 4
  fi

  # must be global in order to handle abortion on 'unrecognized option'
  PARSED=$(getopt --options=$OPTIONS --longoptions=$LONG_OPTIONS --name "$(basename "$0")" -- "$@")
  if [[ $? -ne 0 ]]; then
    usage
    printError "Invalid arguments"
    exit 3
  fi

  eval set -- "$PARSED"
  while true; do
    case "$1" in
      -h | --help)
        usage
        exit 0
        ;;

      -v | --version)
        echo "$VERSION"
        exit 0
        ;;

      --release)
        local -r extra_flags='-UDEBUG -UDEBUG_PERFS -O3 -g0 -ggdb0 -s'
        export WE_EXTRA_CXXFLAGS="$extra_flags $WE_EXTRA_CXXFLAGS"
        shift
        ;;

      --no-build)
        NO_BUILD=1
        shift
        ;;

      --build-dir)
        BUILD_DIR=$2
        shift 2
        ;;

      --)
        shift
        break
        ;;

      *)
        printError "[IMPLEMENTATION ERROR] Supported but not handled argument $1"
        exit 5
        ;;
    esac
  done
}


# ___________________________________ main ___________________________________ #
check_args "$@"
main
